/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace EventGame {
  export type UserScoreStruct = {
    points: BigNumberish;
    numberOfPlays: BigNumberish;
    timeElapsed: BigNumberish;
  };

  export type UserScoreStructOutput = [BigNumber, BigNumber, BigNumber] & {
    points: BigNumber;
    numberOfPlays: BigNumber;
    timeElapsed: BigNumber;
  };
}

export interface EventGameInterface extends utils.Interface {
  functions: {
    'getScoreboard()': FunctionFragment;
    'register()': FunctionFragment;
    's_isRegistered(address)': FunctionFragment;
    's_registeredAddresses(uint256)': FunctionFragment;
    'scoreboard(address)': FunctionFragment;
    'startGame()': FunctionFragment;
    'test()': FunctionFragment;
    'updateName(string)': FunctionFragment;
    'updatePrice(uint256)': FunctionFragment;
    'updateTickets(uint256)': FunctionFragment;
    'userPlay(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getScoreboard'
      | 'register'
      | 's_isRegistered'
      | 's_registeredAddresses'
      | 'scoreboard'
      | 'startGame'
      | 'test'
      | 'updateName'
      | 'updatePrice'
      | 'updateTickets'
      | 'userPlay'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getScoreboard',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'register', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 's_isRegistered',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 's_registeredAddresses',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'scoreboard', values: [string]): string;
  encodeFunctionData(functionFragment: 'startGame', values?: undefined): string;
  encodeFunctionData(functionFragment: 'test', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateName', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updatePrice',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateTickets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'userPlay',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'getScoreboard',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 's_isRegistered',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 's_registeredAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'scoreboard', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startGame', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateName', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updatePrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateTickets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'userPlay', data: BytesLike): Result;

  events: {
    'result(address,address,string,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'result'): EventFragment;
}

export interface resultEventObject {
  gameAddress: string;
  player: string;
  result: string;
  points: BigNumber;
}
export type resultEvent = TypedEvent<
  [string, string, string, BigNumber],
  resultEventObject
>;

export type resultEventFilter = TypedEventFilter<resultEvent>;

export interface EventGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getScoreboard(
      overrides?: CallOverrides
    ): Promise<[EventGame.UserScoreStructOutput]>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_isRegistered(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    s_registeredAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    scoreboard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        points: BigNumber;
        numberOfPlays: BigNumber;
        timeElapsed: BigNumber;
      }
    >;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test(overrides?: CallOverrides): Promise<[string]>;

    updateName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTickets(
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPlay(
      _play: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getScoreboard(
    overrides?: CallOverrides
  ): Promise<EventGame.UserScoreStructOutput>;

  register(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_isRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  s_registeredAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  scoreboard(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      points: BigNumber;
      numberOfPlays: BigNumber;
      timeElapsed: BigNumber;
    }
  >;

  startGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test(overrides?: CallOverrides): Promise<string>;

  updateName(
    _newName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTickets(
    _newTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPlay(
    _play: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getScoreboard(
      overrides?: CallOverrides
    ): Promise<EventGame.UserScoreStructOutput>;

    register(overrides?: CallOverrides): Promise<void>;

    s_isRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    s_registeredAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    scoreboard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        points: BigNumber;
        numberOfPlays: BigNumber;
        timeElapsed: BigNumber;
      }
    >;

    startGame(overrides?: CallOverrides): Promise<void>;

    test(overrides?: CallOverrides): Promise<string>;

    updateName(_newName: string, overrides?: CallOverrides): Promise<void>;

    updatePrice(
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTickets(
      _newTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userPlay(_play: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'result(address,address,string,uint256)'(
      gameAddress?: string | null,
      player?: string | null,
      result?: null,
      points?: null
    ): resultEventFilter;
    result(
      gameAddress?: string | null,
      player?: string | null,
      result?: null,
      points?: null
    ): resultEventFilter;
  };

  estimateGas: {
    getScoreboard(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_isRegistered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_registeredAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreboard(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<BigNumber>;

    updateName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTickets(
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPlay(
      _play: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getScoreboard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_isRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_registeredAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scoreboard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTickets(
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPlay(
      _play: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
