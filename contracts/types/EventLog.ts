/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace EventLog {
  export type EventStruct = {
    eventGameAddress: string;
    eventOwner: string;
    eventName: string;
    numberOfTickets: BigNumberish;
    ticketPrice: BigNumberish;
    totalUsers: BigNumberish;
    isOpen: boolean;
  };

  export type EventStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    eventGameAddress: string;
    eventOwner: string;
    eventName: string;
    numberOfTickets: BigNumber;
    ticketPrice: BigNumber;
    totalUsers: BigNumber;
    isOpen: boolean;
  };
}

export interface EventLogInterface extends utils.Interface {
  functions: {
    '_addCreatedEvent(address,uint256)': FunctionFragment;
    '_addRegisteredEvent(address,uint256)': FunctionFragment;
    '_addWinner(uint256,address)': FunctionFragment;
    '_closeEvent(uint256)': FunctionFragment;
    '_logEvent(uint256,address,address,string,uint256,uint256)': FunctionFragment;
    '_updateName(uint256,string)': FunctionFragment;
    '_updatePrice(uint256,uint256)': FunctionFragment;
    '_updateTickets(uint256,uint256)': FunctionFragment;
    'getCreatedEvents(address)': FunctionFragment;
    'getEventAddress(uint256)': FunctionFragment;
    'getOpenEvents()': FunctionFragment;
    'getRegisteredEvents(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_addCreatedEvent'
      | '_addRegisteredEvent'
      | '_addWinner'
      | '_closeEvent'
      | '_logEvent'
      | '_updateName'
      | '_updatePrice'
      | '_updateTickets'
      | 'getCreatedEvents'
      | 'getEventAddress'
      | 'getOpenEvents'
      | 'getRegisteredEvents'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: '_addCreatedEvent',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: '_addRegisteredEvent',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: '_addWinner',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: '_closeEvent',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: '_logEvent',
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: '_updateName',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: '_updatePrice',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: '_updateTickets',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCreatedEvents',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEventAddress',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOpenEvents',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredEvents',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: '_addCreatedEvent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: '_addRegisteredEvent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: '_addWinner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: '_closeEvent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: '_logEvent', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: '_updateName',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: '_updatePrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: '_updateTickets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCreatedEvents',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEventAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOpenEvents',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredEvents',
    data: BytesLike
  ): Result;

  events: {};
}

export interface EventLog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventLogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addCreatedEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _addRegisteredEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _addWinner(
      _eventId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _closeEvent(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _logEvent(
      _eventId: BigNumberish,
      _eventGameAddress: string,
      _eventOwner: string,
      _eventName: string,
      _numberOfTickets: BigNumberish,
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _updateName(
      _eventId: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _updatePrice(
      _eventId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _updateTickets(
      _eventId: BigNumberish,
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreatedEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[EventLog.EventStructOutput[]]>;

    getEventAddress(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOpenEvents(
      overrides?: CallOverrides
    ): Promise<[EventLog.EventStructOutput[]]>;

    getRegisteredEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[EventLog.EventStructOutput[]]>;
  };

  _addCreatedEvent(
    _userAddress: string,
    _eventId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _addRegisteredEvent(
    _userAddress: string,
    _eventId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _addWinner(
    _eventId: BigNumberish,
    _winner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _closeEvent(
    _eventId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _logEvent(
    _eventId: BigNumberish,
    _eventGameAddress: string,
    _eventOwner: string,
    _eventName: string,
    _numberOfTickets: BigNumberish,
    _ticketPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _updateName(
    _eventId: BigNumberish,
    _newName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _updatePrice(
    _eventId: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _updateTickets(
    _eventId: BigNumberish,
    _newTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreatedEvents(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<EventLog.EventStructOutput[]>;

  getEventAddress(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOpenEvents(
    overrides?: CallOverrides
  ): Promise<EventLog.EventStructOutput[]>;

  getRegisteredEvents(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<EventLog.EventStructOutput[]>;

  callStatic: {
    _addCreatedEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _addRegisteredEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _addWinner(
      _eventId: BigNumberish,
      _winner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _closeEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _logEvent(
      _eventId: BigNumberish,
      _eventGameAddress: string,
      _eventOwner: string,
      _eventName: string,
      _numberOfTickets: BigNumberish,
      _ticketPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _updateName(
      _eventId: BigNumberish,
      _newName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatePrice(
      _eventId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _updateTickets(
      _eventId: BigNumberish,
      _newTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreatedEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<EventLog.EventStructOutput[]>;

    getEventAddress(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOpenEvents(
      overrides?: CallOverrides
    ): Promise<EventLog.EventStructOutput[]>;

    getRegisteredEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<EventLog.EventStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    _addCreatedEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _addRegisteredEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _addWinner(
      _eventId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _closeEvent(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _logEvent(
      _eventId: BigNumberish,
      _eventGameAddress: string,
      _eventOwner: string,
      _eventName: string,
      _numberOfTickets: BigNumberish,
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _updateName(
      _eventId: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _updatePrice(
      _eventId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _updateTickets(
      _eventId: BigNumberish,
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreatedEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventAddress(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addCreatedEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _addRegisteredEvent(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _addWinner(
      _eventId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _closeEvent(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _logEvent(
      _eventId: BigNumberish,
      _eventGameAddress: string,
      _eventOwner: string,
      _eventName: string,
      _numberOfTickets: BigNumberish,
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _updateName(
      _eventId: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _updatePrice(
      _eventId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _updateTickets(
      _eventId: BigNumberish,
      _newTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreatedEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventAddress(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegisteredEvents(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
